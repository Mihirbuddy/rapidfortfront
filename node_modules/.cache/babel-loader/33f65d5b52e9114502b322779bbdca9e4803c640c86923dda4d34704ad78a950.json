{"ast":null,"code":"var _jsxFileName = \"/Users/mihirpradhan/Desktop/rapidfort/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [file, setFile] = useState(null);\n//   const [pdfUrl, setPdfUrl] = useState(null);\n\n//   const handleFileChange = (e) => {\n//     setFile(e.target.files[0]);\n//   };\n\n//   const handleUpload = async () => {\n//     if (file) {\n//       const formData = new FormData();\n//       formData.append('file', file);\n\n//       try {\n//         const response = await fetch('http://localhost:5001/upload', {\n//           method: 'POST',\n//           body: formData,\n//         });\n\n//         if (response.ok) {\n//           const data = await response.json();\n//           setPdfUrl(data.pdfUrl); // Set the URL of the converted PDF\n//         } else {\n//           alert('Error uploading or converting file.');\n//         }\n//       } catch (error) {\n//         console.error('Error:', error);\n//         alert('An error occurred. Please try again.');\n//       }\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Docx to PDF Converter</h1>\n//       <div className=\"container\">\n//         <input type=\"file\" onChange={handleFileChange} accept=\".docx\" />\n//         {file && (\n//           <div className=\"metadata\">\n//             <p>Name: {file.name}</p>\n//             <p>Size: {file.size} bytes</p>\n//           </div>\n//         )}\n//         <button onClick={handleUpload}>Upload and Convert</button>\n\n//         {pdfUrl && (\n//           <div>\n//             <a href={pdfUrl} download={file.name.replace('.docx', '.pdf')}>\n//               Download PDF\n//             </a>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [password, setPassword] = useState('');\n  const [pdfUrl, setPdfUrl] = useState(null);\n  const handleFileChange = e => {\n    setFile(e.target.files[0]);\n  };\n  const handleUpload = async () => {\n    if (file && password) {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('password', password); // Send password to backend\n\n      try {\n        const response = await fetch('http://localhost:5001/upload', {\n          method: 'POST',\n          body: formData\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setPdfUrl(data.pdfUrl); // Save the returned PDF URL\n        } else {\n          alert('Error uploading file');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    } else {\n      alert('Please select a file and set a password');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Docx to PDF Converter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange,\n        accept: \".docx\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), file && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metadata\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Name: \", file.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Size: \", file.size, \" bytes\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Set PDF Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        children: \"Upload and Convert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), pdfUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: pdfUrl,\n          download: file.name.replace('.docx', '.pdf'),\n          children: \"Download Protected PDF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"YbNztEXL5Dw+zmCk3wEftNM1JMo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","file","setFile","password","setPassword","pdfUrl","setPdfUrl","handleFileChange","e","target","files","handleUpload","formData","FormData","append","response","fetch","method","body","ok","data","json","alert","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","accept","name","size","placeholder","value","onClick","href","download","replace","_c","$RefreshReg$"],"sources":["/Users/mihirpradhan/Desktop/rapidfort/frontend/src/App.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [file, setFile] = useState(null);\n//   const [pdfUrl, setPdfUrl] = useState(null);\n\n//   const handleFileChange = (e) => {\n//     setFile(e.target.files[0]);\n//   };\n\n//   const handleUpload = async () => {\n//     if (file) {\n//       const formData = new FormData();\n//       formData.append('file', file);\n\n//       try {\n//         const response = await fetch('http://localhost:5001/upload', {\n//           method: 'POST',\n//           body: formData,\n//         });\n\n//         if (response.ok) {\n//           const data = await response.json();\n//           setPdfUrl(data.pdfUrl); // Set the URL of the converted PDF\n//         } else {\n//           alert('Error uploading or converting file.');\n//         }\n//       } catch (error) {\n//         console.error('Error:', error);\n//         alert('An error occurred. Please try again.');\n//       }\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Docx to PDF Converter</h1>\n//       <div className=\"container\">\n//         <input type=\"file\" onChange={handleFileChange} accept=\".docx\" />\n//         {file && (\n//           <div className=\"metadata\">\n//             <p>Name: {file.name}</p>\n//             <p>Size: {file.size} bytes</p>\n//           </div>\n//         )}\n//         <button onClick={handleUpload}>Upload and Convert</button>\n\n//         {pdfUrl && (\n//           <div>\n//             <a href={pdfUrl} download={file.name.replace('.docx', '.pdf')}>\n//               Download PDF\n//             </a>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nimport React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [file, setFile] = useState(null);\n  const [password, setPassword] = useState('');\n  const [pdfUrl, setPdfUrl] = useState(null);\n\n  const handleFileChange = (e) => {\n    setFile(e.target.files[0]);\n  };\n\n  const handleUpload = async () => {\n    if (file && password) {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('password', password); // Send password to backend\n\n      try {\n        const response = await fetch('http://localhost:5001/upload', {\n          method: 'POST',\n          body: formData,\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          setPdfUrl(data.pdfUrl); // Save the returned PDF URL\n        } else {\n          alert('Error uploading file');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    } else {\n      alert('Please select a file and set a password');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Docx to PDF Converter</h1>\n      <div className=\"container\">\n        <input type=\"file\" onChange={handleFileChange} accept=\".docx\" />\n        {file && (\n          <div className=\"metadata\">\n            <p>Name: {file.name}</p>\n            <p>Size: {file.size} bytes</p>\n          </div>\n        )}\n        <input\n          type=\"password\"\n          placeholder=\"Set PDF Password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <button onClick={handleUpload}>Upload and Convert</button>\n\n        {pdfUrl && (\n          <div>\n            <a href={pdfUrl} download={file.name.replace('.docx', '.pdf')}>\n              Download Protected PDF\n            </a>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}