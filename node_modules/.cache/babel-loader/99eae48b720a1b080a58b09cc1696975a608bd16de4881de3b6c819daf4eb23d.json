{"ast":null,"code":"var _jsxFileName = \"/Users/mihirpradhan/Desktop/rapidfort/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [pdfUrl, setPdfUrl] = useState(null);\n  const handleFileChange = e => {\n    setFile(e.target.files[0]);\n  };\n  const handleUpload = async () => {\n    if (file) {\n      const formData = new FormData();\n      formData.append('file', file);\n      try {\n        const response = await fetch('http://localhost:5000/upload', {\n          method: 'POST',\n          body: formData\n        });\n        const data = await response.json();\n        if (response.ok) {\n          setPdfUrl(data.pdfUrl); // Store the PDF URL after successful upload\n        } else {\n          alert('Error uploading file');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Docx to PDF Converter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange,\n        accept: \".docx\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), file && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metadata\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Name: \", file.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Size: \", file.size, \" bytes\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Set PDF Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        children: \"Upload and Convert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), pdfUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: pdfUrl,\n          download: true,\n          children: \"Download PDF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"UUgQeM9Y54P1DA3jMddd0uDuiMo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","file","setFile","pdfUrl","setPdfUrl","handleFileChange","e","target","files","handleUpload","formData","FormData","append","response","fetch","method","body","data","json","ok","alert","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","accept","name","size","placeholder","onClick","href","download","_c","$RefreshReg$"],"sources":["/Users/mihirpradhan/Desktop/rapidfort/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction App() {\n  const [file, setFile] = useState(null);\n  const [pdfUrl, setPdfUrl] = useState(null);\n\n  const handleFileChange = (e) => {\n    setFile(e.target.files[0]);\n  };\n\n  const handleUpload = async () => {\n    if (file) {\n      const formData = new FormData();\n      formData.append('file', file);\n\n      try {\n        const response = await fetch('http://localhost:5000/upload', {\n          method: 'POST',\n          body: formData,\n        });\n\n        const data = await response.json();\n\n        if (response.ok) {\n          setPdfUrl(data.pdfUrl); // Store the PDF URL after successful upload\n        } else {\n          alert('Error uploading file');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Docx to PDF Converter</h1>\n      <div className=\"container\">\n        <input type=\"file\" onChange={handleFileChange} accept=\".docx\" />\n        {file && (\n          <div className=\"metadata\">\n            <p>Name: {file.name}</p>\n            <p>Size: {file.size} bytes</p>\n          </div>\n        )}\n        <input type=\"password\" placeholder=\"Set PDF Password\" />\n        <button onClick={handleUpload}>Upload and Convert</button>\n\n        {pdfUrl && (\n          <div>\n            <a href={pdfUrl} download>\n              Download PDF\n            </a>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}